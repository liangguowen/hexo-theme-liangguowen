{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"themes/liangguowen/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"themes/liangguowen/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/docker/docker4.jpg","path":"img/docker/docker4.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/liangguowen/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/liangguowen/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"themes/liangguowen/source/images/photo.jpg","path":"images/photo.jpg","modified":0,"renderable":1},{"_id":"source/img/docker/docker1.jpg","path":"img/docker/docker1.jpg","modified":0,"renderable":0},{"_id":"source/img/docker/docker2.jpg","path":"img/docker/docker2.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home4.jpg","path":"img/header_img/home4.jpg","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1565959414000},{"_id":"source/CNAME","hash":"9e6f57443c916597fbd8257c2f90d8533eaff248","modified":1565959414000},{"_id":"themes/liangguowen/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1565959414000},{"_id":"themes/liangguowen/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1565959414000},{"_id":"source/_posts/docker-ci-cd.md","hash":"76253730ddf5263cb7d6f809e4496dd3a8c7256d","modified":1593873214629},{"_id":"source/_posts/docker-install.md","hash":"0902d8f516e9acc0b7efbca58bb6b61ef7003315","modified":1593869574280},{"_id":"source/_posts/docker.md","hash":"e81a51db668065d88174dc5e4b27e99c52e4f2d8","modified":1593873216606},{"_id":"source/_posts/hexo-theme-liangguowen.md","hash":"4c68f2d1254a31c9f01d288d05b02fdccd7d1eca","modified":1593869454410},{"_id":"source/about/index.md","hash":"ee6d4682a93d50b64c07080a801afbaedadc06ab","modified":1593755372527},{"_id":"source/archive/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1593794750027},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1565959414000},{"_id":"source/tags/index.md","hash":"f6ad1039c242795de5cd7d81781148f8c5298c28","modified":1593755437377},{"_id":"themes/liangguowen/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1565959414000},{"_id":"themes/liangguowen/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1565959414000},{"_id":"themes/liangguowen/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1565959414000},{"_id":"themes/liangguowen/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1565959414000},{"_id":"themes/liangguowen/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1565959414000},{"_id":"themes/liangguowen/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1565959414000},{"_id":"themes/liangguowen/layout/index.ejs","hash":"9e682d5d19cce88ffcae6bbcd0d644df64a6d735","modified":1565959414000},{"_id":"themes/liangguowen/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1565959414000},{"_id":"themes/liangguowen/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1593846671764},{"_id":"themes/liangguowen/layout/post.ejs","hash":"7088681f19dee7f2bb3d52969a912521423a6494","modified":1593870913932},{"_id":"themes/liangguowen/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1565959414000},{"_id":"source/_posts/docker/1464965-20190725162103819-1664036221.jpg","hash":"2623e4d099aa3818c322f1b6f59919c511a4a182","modified":1593768659898},{"_id":"source/_posts/docker/1464965-20190725163201933-1522934949.png","hash":"17c3f5d2c2d49aa220f86b7a91fb2cba08997fc0","modified":1593768659899},{"_id":"source/_posts/docker/1464965-20190725163537468-1471897867.png","hash":"e954317d91d60fc0a2e0d2a615c851d8d2ff2edc","modified":1593768659900},{"_id":"source/_posts/docker-install/image-20200704205412073.png","hash":"0614e1d1184b00b4cd85b1fb6bc9957f3827fe6d","modified":1593867252196},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1565959414000},{"_id":"themes/liangguowen/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1565959414000},{"_id":"themes/liangguowen/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1565959414000},{"_id":"themes/liangguowen/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1565959414000},{"_id":"themes/liangguowen/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1565959414000},{"_id":"themes/liangguowen/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1565959414000},{"_id":"themes/liangguowen/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1565959414000},{"_id":"themes/liangguowen/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1565959414000},{"_id":"themes/liangguowen/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1565959414000},{"_id":"themes/liangguowen/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1565959414000},{"_id":"themes/liangguowen/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1565959414000},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1565959414000},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1565959414000},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1565959414000},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1565959414000},{"_id":"themes/liangguowen/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1565959414000},{"_id":"themes/liangguowen/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1565959414000},{"_id":"themes/liangguowen/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1565959414000},{"_id":"themes/liangguowen/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1565959414000},{"_id":"themes/liangguowen/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1565959414000},{"_id":"themes/liangguowen/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1565959414000},{"_id":"themes/liangguowen/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1565959414000},{"_id":"themes/liangguowen/layout/_partial/footer.ejs","hash":"5c256542b82ae7629ecc2f3ffc628dcb7c616df5","modified":1593755038918},{"_id":"themes/liangguowen/layout/_partial/head.ejs","hash":"720349195a5ea7b610a82ce3ce74298fb2bc7347","modified":1565959414000},{"_id":"themes/liangguowen/layout/_partial/header.ejs","hash":"f01424df2a2e156a0280b95bef9fc191024156ef","modified":1593846871728},{"_id":"themes/liangguowen/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1565959414000},{"_id":"themes/liangguowen/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1565959414000},{"_id":"themes/liangguowen/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1565959414000},{"_id":"themes/liangguowen/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1565959414000},{"_id":"themes/liangguowen/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1565959414000},{"_id":"source/_posts/docker/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1593768659901},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1565959414000},{"_id":"themes/liangguowen/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1565959414000},{"_id":"themes/liangguowen/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1565959414000},{"_id":"themes/liangguowen/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1565959414000},{"_id":"themes/liangguowen/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565959414000},{"_id":"source/_posts/docker-install/20200619182635129.png","hash":"44dbd1d1ffa400bbca7d92fcecc60b78ed94ae8b","modified":1593867392025},{"_id":"source/_posts/docker-install/20200619182720953.png","hash":"bf6bf1c9eb6d8b2a8dc937e63ee03574d0f09c85","modified":1593868237552},{"_id":"source/img/docker/docker4.jpg","hash":"1a9739d7ff6f95d656c39578bfc119dc86afd89f","modified":1593772418841},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1565959414000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1565959414000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1565959414000},{"_id":"themes/liangguowen/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1565959414000},{"_id":"themes/liangguowen/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1565959414000},{"_id":"themes/liangguowen/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1565959414000},{"_id":"source/_posts/docker-install/20200619182705744.png","hash":"2f0391034fecf650880274aba71f52502ec4de47","modified":1593868079813},{"_id":"source/_posts/docker-install/image-20200704211148370.png","hash":"57d86f9994be35df072660bb63167d94d9b85c79","modified":1593868308424},{"_id":"themes/liangguowen/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1565959414000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1565959414000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1565959414000},{"_id":"source/img/avatar/ironman.png","hash":"3499edaabc500904f5109f6ac7795a5428463d1d","modified":1593711511141},{"_id":"themes/liangguowen/source/images/photo.jpg","hash":"87bdca66c583cc1c69f54441a55b1b5ce7d6d391","modified":1593788204395},{"_id":"source/_posts/docker-install/20200619182742864.png","hash":"018eb3457f6c1a520163f7cb04e1cc3df83a7b9e","modified":1593868717580},{"_id":"source/img/docker/docker1.jpg","hash":"f402242333ccaf4c0d0ac8178031ee0b50a401a9","modified":1593771813885},{"_id":"source/img/docker/docker2.jpg","hash":"450948d9bab8222d2d93a9002bbaa3984cdd31af","modified":1593771813929},{"_id":"source/img/header_img/home3.jpg","hash":"bbdeeac6dcf60a8b8b940faeaa73ac629026f643","modified":1593756883219},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1565959414000},{"_id":"source/img/header_img/home4.jpg","hash":"cf865aa8ba383b61e9810ee3dbe48cb9c792ebef","modified":1593756890002},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1565959414000},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1565959414000},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1565959414000},{"_id":"source/_posts/hexo-theme-liangguowen/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1565959414000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1565959414000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1565959414000},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1565959414000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1565959414000},{"_id":"public/post-sitemap.xml","hash":"fa089aef3ee547d5dfe68ad34d688932748be16f","modified":1593881400611},{"_id":"public/page-sitemap.xml","hash":"92aab7defe25e6ffe2b222ac12af318c76f48460","modified":1593881400653},{"_id":"public/tag-sitemap.xml","hash":"d3b50f630f1be3c4baebb5416e3dd8497d134310","modified":1593881400665},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1593881400666},{"_id":"public/sitemap.xml","hash":"1ee787b42c1065b55f1f328600038ed715ebe73b","modified":1593881400666},{"_id":"public/404.html","hash":"91a7420ff262b125ca7d4b1d0495c67a668787be","modified":1593881400670},{"_id":"public/tags/index.html","hash":"8daaa72bd86a99d554d86a5edbad22960244b3aa","modified":1593881400670},{"_id":"public/article/docker-install/index.html","hash":"0a9232d5b205bbe140b6aa5e282cc65fd4ac9186","modified":1593881400670},{"_id":"public/article/docker-ci-cd/index.html","hash":"dad2ae0101fc894b3abedf1970af4c61e24a1e29","modified":1593881400670},{"_id":"public/article/docker/index.html","hash":"6832550bbe917e742c91e1197a1f0b2f3998dcde","modified":1593881400670},{"_id":"public/article/hexo-theme-liangguowen/index.html","hash":"de8375b892c4ec37a7e84c9142e9f5dfb14ab1d8","modified":1593881400670},{"_id":"public/about/index.html","hash":"be8cb13410459505534313c2ee912ad597611081","modified":1593881400670},{"_id":"public/archive/index.html","hash":"51b9c777381bbad0632be9873b06d813bbcd27ce","modified":1593881400670},{"_id":"public/archives/index.html","hash":"69b9874c793cddf24a87490d5fc609b1c559b8db","modified":1593881400670},{"_id":"public/archives/2020/index.html","hash":"6a1b933d38bac76a0420ce1cbd333ace352fa2e0","modified":1593881400670},{"_id":"public/archives/2020/06/index.html","hash":"45299e43bd1ebee5bc3f5ae85d62abdda3b768c1","modified":1593881400670},{"_id":"public/archives/2020/07/index.html","hash":"ab7defc52e414565aa12e81724af869953c05f6f","modified":1593881400670},{"_id":"public/index.html","hash":"78b08ffa70b16ea390d0bee6921e48c8316445f8","modified":1593881400670},{"_id":"public/tags/Docker/index.html","hash":"a25e7ce69894e43e80ceb557f74390dbbbd52de0","modified":1593881400671},{"_id":"public/tags/Hexo/index.html","hash":"d638970e14d5ce9378bd79676fb65b7cabbe87f4","modified":1593881400671},{"_id":"public/CNAME","hash":"9e6f57443c916597fbd8257c2f90d8533eaff248","modified":1593881400685},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1593881400685},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1593881400685},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1593881400685},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1593881400685},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1593881400685},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1593881400685},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1593881400685},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1593881400685},{"_id":"public/article/docker/1464965-20190725162103819-1664036221.jpg","hash":"2623e4d099aa3818c322f1b6f59919c511a4a182","modified":1593881400686},{"_id":"public/article/docker/1464965-20190725163201933-1522934949.png","hash":"17c3f5d2c2d49aa220f86b7a91fb2cba08997fc0","modified":1593881400686},{"_id":"public/article/docker/1464965-20190725163537468-1471897867.png","hash":"e954317d91d60fc0a2e0d2a615c851d8d2ff2edc","modified":1593881400686},{"_id":"public/article/docker-install/image-20200704205412073.png","hash":"0614e1d1184b00b4cd85b1fb6bc9957f3827fe6d","modified":1593881400686},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1593881400890},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1593881400890},{"_id":"public/article/docker-install/20200619182635129.png","hash":"44dbd1d1ffa400bbca7d92fcecc60b78ed94ae8b","modified":1593881400891},{"_id":"public/article/docker/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1593881400891},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1593881400896},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1593881400896},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1593881400896},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1593881400896},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1593881400896},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1593881400896},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1593881400897},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1593881400897},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1593881400897},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1593881400897},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1593881400897},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1593881400897},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1593881400897},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1593881400897},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1593881400897},{"_id":"public/article/docker-install/20200619182705744.png","hash":"2f0391034fecf650880274aba71f52502ec4de47","modified":1593881400897},{"_id":"public/article/docker-install/image-20200704211148370.png","hash":"57d86f9994be35df072660bb63167d94d9b85c79","modified":1593881400897},{"_id":"public/article/docker-install/20200619182720953.png","hash":"bf6bf1c9eb6d8b2a8dc937e63ee03574d0f09c85","modified":1593881400897},{"_id":"public/img/docker/docker4.jpg","hash":"1a9739d7ff6f95d656c39578bfc119dc86afd89f","modified":1593881400901},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1593881400907},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1593881400907},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1593881400907},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1593881400908},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1593881400948},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1593881400950},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1593881400950},{"_id":"public/img/avatar/ironman.png","hash":"3499edaabc500904f5109f6ac7795a5428463d1d","modified":1593881400950},{"_id":"public/images/photo.jpg","hash":"87bdca66c583cc1c69f54441a55b1b5ce7d6d391","modified":1593881400950},{"_id":"public/img/docker/docker2.jpg","hash":"450948d9bab8222d2d93a9002bbaa3984cdd31af","modified":1593881400955},{"_id":"public/article/docker-install/20200619182742864.png","hash":"018eb3457f6c1a520163f7cb04e1cc3df83a7b9e","modified":1593881400956},{"_id":"public/img/docker/docker1.jpg","hash":"f402242333ccaf4c0d0ac8178031ee0b50a401a9","modified":1593881400960},{"_id":"public/img/header_img/home3.jpg","hash":"bbdeeac6dcf60a8b8b940faeaa73ac629026f643","modified":1593881401085},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1593881401104},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1593881401148},{"_id":"public/img/header_img/home4.jpg","hash":"cf865aa8ba383b61e9810ee3dbe48cb9c792ebef","modified":1593881401148},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1593881401154},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1593881401157},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1593881401162},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1593881401164},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1593881401168},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1593881401178},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1593881401184},{"_id":"public/article/hexo-theme-liangguowen/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1593881401186},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1593881401188},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1593881401190},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1593881401191},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1593881401196}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2020-07-04T09:08:54.191Z","updated":"2019-08-16T12:43:34.000Z","path":"404.html","title":"","comments":1,"_id":"ckc7vtzcl0000qstgqhhv2gj5","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2020-06-03T02:48:33.000Z","description":"走在成为极客的路上","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 容器云（Docker、Kubernetes等）相关生态技术研究。\n\n### 参与社区\n\n > CSDN博客:http://blog.csdn.net/lgw_999\n >\n > Github:https://github.com/liangguowen\n >\n > 阿里云栖社区:https://yq.aliyun.com/u/liangguowen\n >\n > DockOne社区:http://dockone.io/people/liangguowen\n\n### 联系我\n\n>Email: 18620349331@163.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2020-06-03 10:48:33\ndescription: \"走在成为极客的路上\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 容器云（Docker、Kubernetes等）相关生态技术研究。\n\n### 参与社区\n\n > CSDN博客:http://blog.csdn.net/lgw_999\n >\n > Github:https://github.com/liangguowen\n >\n > 阿里云栖社区:https://yq.aliyun.com/u/liangguowen\n >\n > DockOne社区:http://dockone.io/people/liangguowen\n\n### 联系我\n\n>Email: 18620349331@163.com\n\n","updated":"2020-07-03T05:49:32.527Z","path":"about/index.html","comments":1,"_id":"ckc7vtzdd0002qstgrhevk62j","content":"<h3 id=\"一句话\">一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3 id=\"关于我\">关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3 id=\"兴趣方向\">兴趣方向</h3>\n<blockquote>\n<p>容器云（Docker、Kubernetes等）相关生态技术研究。</p>\n</blockquote>\n<h3 id=\"参与社区\">参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"http://blog.csdn.net/lgw_999\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lgw_999</a></p>\n<p>Github:<a href=\"https://github.com/liangguowen\" target=\"_blank\" rel=\"noopener\">https://github.com/liangguowen</a></p>\n<p>阿里云栖社区:<a href=\"https://yq.aliyun.com/u/liangguowen\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/u/liangguowen</a></p>\n<p>DockOne社区:<a href=\"http://dockone.io/people/liangguowen\" target=\"_blank\" rel=\"noopener\">http://dockone.io/people/liangguowen</a></p>\n</blockquote>\n<h3 id=\"联系我\">联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:18620349331@163.com\" target=\"_blank\" rel=\"noopener\">18620349331@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>容器云（Docker、Kubernetes等）相关生态技术研究。</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"http://blog.csdn.net/lgw_999\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lgw_999</a></p>\n<p>Github:<a href=\"https://github.com/liangguowen\" target=\"_blank\" rel=\"noopener\">https://github.com/liangguowen</a></p>\n<p>阿里云栖社区:<a href=\"https://yq.aliyun.com/u/liangguowen\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/u/liangguowen</a></p>\n<p>DockOne社区:<a href=\"http://dockone.io/people/liangguowen\" target=\"_blank\" rel=\"noopener\">http://dockone.io/people/liangguowen</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:18620349331@163.com\" target=\"_blank\" rel=\"noopener\">18620349331@163.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2020-07-03T16:45:50.027Z","path":"archive/index.html","_id":"ckc7vtzdf0004qstgvhqpdeds","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","date":"2020-07-04T09:08:54.465Z","updated":"2020-07-03T05:50:37.377Z","path":"tags/index.html","comments":1,"_id":"ckc7vtzdn0007qstguovz431y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[Docker] CICD 持续集成 Devops","catalog":true,"toc_nav_num":true,"date":"2020-07-03T02:51:24.000Z","subtitle":"This is Docker","header-img":"/img/docker/docker4.jpg","catagories":["Docker"],"updateDate":"2020-07-03T02:51:24.000Z","top":3,"_content":"\n**Docker2 CICD 持续集成 Devops**\n\n## 一、简介\n\n### 1、Devops 介绍\n","source":"_posts/docker-ci-cd.md","raw":"---\ntitle: \"[Docker] CICD 持续集成 Devops\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-07-03 10:51:24\nsubtitle: \"This is Docker\"\nheader-img: \"/img/docker/docker4.jpg\"\ntags:\n- Docker\ncatagories:\n- Docker\nupdateDate: 2020-07-03 10:51:24\ntop: 3\n\n---\n\n**Docker2 CICD 持续集成 Devops**\n\n## 一、简介\n\n### 1、Devops 介绍\n","slug":"docker-ci-cd","published":1,"updated":"2020-07-04T14:33:34.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7vtzd80001qstgx92vtmge","content":"<p><strong>Docker2 CICD 持续集成 Devops</strong></p>\n<h2 id=\"一-简介\">一、简介</h2>\n<h3 id=\"1-devops-介绍\">1、Devops 介绍</h3>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Docker2 CICD 持续集成 Devops</strong></p>\n<h2>一、简介</h2>\n<h3>1、Devops 介绍</h3>\n"},{"title":"[Docker] 架构原理","catalog":true,"toc_nav_num":true,"date":"2020-06-18T02:51:24.000Z","subtitle":"This is Docker","header-img":"/img/docker/docker4.jpg","catagories":["Docker"],"updateDate":"2020-06-18T02:51:24.000Z","top":2,"_content":"\n**Docker1 架构原理**\n\n## 一、简介\n\n### 1、了解docker的前生LXC\n\nLXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++中的NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n\n与传统虚拟化技术相比，它的优势在于：\n\n（1）与宿主机使用同一个内核，性能损耗小；\n\n（2）不需要指令级模拟；\n\n（3）不需要即时(Just-in-time)编译；\n\n（4）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；\n\n（5）避免了准虚拟化和系统调用替换中的复杂性；\n\n（ 6）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。\n\n总结：Linux Container是一种轻量级的虚拟化的手段。\n\nLinux Container提供了在单一可控主机节点上支持多个相互隔离的server container同时执行的机制。Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。\n\n### 2、LXC与docker什么关系？\n\ndocker并不是LXC替代品，docker底层使用了LXC来实现，LXC将linux进程沙盒化，使得进程之间相互隔离，并且能够控制各进程的资源分配。\n\n在LXC的基础之上，docker提供了一系列更强大的功能。\n\n### 3、什么是docker\n\ndocker是一个开源的应用容器引擎，基于go语言开发并遵循了apache2.0协议开源。\n\ndocker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的linux服务器，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类iphone的app），并且容器开销极其低。\n\n### 4、docker官方文档\n\nhttps://docs.docker.com/\n\n### 5、为什么docker越来越受欢迎\n\n**因为容器是：**\n\n- 灵活：即使是最复杂的应用也可以集装箱化。\n- 轻量级：容器利用并共享主机内核。\n- 可互换：您可以即时部署更新和升级。\n- 便携式：您可以在本地构建，部署到云，并在任何地方运行。\n- 可扩展：您可以增加并自动分发容器副本。\n- 可堆叠：您可以垂直和即时堆叠服务。\n\n**镜像和容器（contalners）**\n\n通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。\n\n容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看\n\n**容器和虚拟机**\n\n容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量\n\n虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多\n\n![1464965-20190725162103819-1664036221](docker/1464965-20190725162103819-1664036221.jpg)\n\n### 6、docker版本\n\nDocker Community Edition（CE）社区版\n\nEnterprise Edition(EE) 商业版\n\n### 7、docker和openstack的几项对比\n\n![alt](docker/1464965-20190725163201933-1522934949.png)\n\n \n\n### 8、容器在内核中支持2种重要技术\n\ndocker本质就是宿主机的一个进程，docker是通过namespace实现资源隔离，通过cgroup实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作（类似虚拟机的磁盘比如分配500g并不是实际占用物理磁盘500g）\n\n> 1.namespaces 名称空间\n\n \n\n![img](docker/1464965-20190725163537468-1471897867.png)\n\n \n\n \n\n> 2.control Group 控制组\n\ncgroup的特点是：　　　　　　　\n\ncgroup的api以一个伪文件系统的实现方式，用户的程序可以通过文件系统实现cgroup的组件管理\ncgroup的组件管理操作单元可以细粒度到线程级别，另外用户可以创建和销毁cgroup，从而实现资源载分配和再利用\n 所有资源管理的功能都以子系统的方式实现，接口统一子任务创建之初与其父任务处于同一个cgroup的控制组\n\n四大功能：　　　　　　　　\n\n资源限制：可以对任务使用的资源总额进行限制\n资源统计：可以统计系统的资源使用量，如cpu时长，内存用量等\n任务控制：cgroup可以对任务执行挂起、恢复等操作\n\n### 9、了解docker三个重要概念\n\n> 1 mage镜像\n\ndocker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下周一个已经做好的镜像来直接使用\n\n\n\n> 2 container容器\n\ndocker利用容器来运行应用，容器是从镜像创建的运行实例，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，保证安全的平台，可以吧容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行再其中的应用程序\n\n\n\n> 3 repostory仓库\n\n仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）\n\n仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务\n\n### 10、docker的主要用途\n\n方就是Bulid 、ship、run any app/any where，编译、装载、运行、任何app/在任意地放都能运行\n\n就是实现了应用的封装、部署、运行的生命周期管理只要在glibc的环境下，都可以运行\n\n**运维生成环境中：docker化**\n\n发布服务不用担心服务器的运行环境，所有的服务器都是自动分配docker，自动部署，自动安装，自动运行\n\n再不用担心其他服务引擎的磁盘问题，cpu问题，系统问题了\n\n\n\n**资源利用更出色**\n\n自动迁移，可以制作镜像，迁移使用自定义的镜像即可迁移，不会出现什么问题\n\n管理更加方便了\n\n### 11、docker改变了什么\n\n面向产品：产品交付\n\n面向开发：简化环境配置\n\n面向测试：多版本测试\n\n面向运维：环境一致性\n\n面向架构：自动化扩容（微服务）","source":"_posts/docker.md","raw":"---\ntitle: \"[Docker] 架构原理\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-06-18 10:51:24\nsubtitle: \"This is Docker\"\nheader-img: \"/img/docker/docker4.jpg\"\ntags:\n- Docker\ncatagories:\n- Docker\nupdateDate: 2020-06-18 10:51:24\ntop: 2\n\n---\n\n**Docker1 架构原理**\n\n## 一、简介\n\n### 1、了解docker的前生LXC\n\nLXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++中的NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n\n与传统虚拟化技术相比，它的优势在于：\n\n（1）与宿主机使用同一个内核，性能损耗小；\n\n（2）不需要指令级模拟；\n\n（3）不需要即时(Just-in-time)编译；\n\n（4）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；\n\n（5）避免了准虚拟化和系统调用替换中的复杂性；\n\n（ 6）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。\n\n总结：Linux Container是一种轻量级的虚拟化的手段。\n\nLinux Container提供了在单一可控主机节点上支持多个相互隔离的server container同时执行的机制。Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。\n\n### 2、LXC与docker什么关系？\n\ndocker并不是LXC替代品，docker底层使用了LXC来实现，LXC将linux进程沙盒化，使得进程之间相互隔离，并且能够控制各进程的资源分配。\n\n在LXC的基础之上，docker提供了一系列更强大的功能。\n\n### 3、什么是docker\n\ndocker是一个开源的应用容器引擎，基于go语言开发并遵循了apache2.0协议开源。\n\ndocker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的linux服务器，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类iphone的app），并且容器开销极其低。\n\n### 4、docker官方文档\n\nhttps://docs.docker.com/\n\n### 5、为什么docker越来越受欢迎\n\n**因为容器是：**\n\n- 灵活：即使是最复杂的应用也可以集装箱化。\n- 轻量级：容器利用并共享主机内核。\n- 可互换：您可以即时部署更新和升级。\n- 便携式：您可以在本地构建，部署到云，并在任何地方运行。\n- 可扩展：您可以增加并自动分发容器副本。\n- 可堆叠：您可以垂直和即时堆叠服务。\n\n**镜像和容器（contalners）**\n\n通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。\n\n容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看\n\n**容器和虚拟机**\n\n容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量\n\n虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多\n\n![1464965-20190725162103819-1664036221](docker/1464965-20190725162103819-1664036221.jpg)\n\n### 6、docker版本\n\nDocker Community Edition（CE）社区版\n\nEnterprise Edition(EE) 商业版\n\n### 7、docker和openstack的几项对比\n\n![alt](docker/1464965-20190725163201933-1522934949.png)\n\n \n\n### 8、容器在内核中支持2种重要技术\n\ndocker本质就是宿主机的一个进程，docker是通过namespace实现资源隔离，通过cgroup实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作（类似虚拟机的磁盘比如分配500g并不是实际占用物理磁盘500g）\n\n> 1.namespaces 名称空间\n\n \n\n![img](docker/1464965-20190725163537468-1471897867.png)\n\n \n\n \n\n> 2.control Group 控制组\n\ncgroup的特点是：　　　　　　　\n\ncgroup的api以一个伪文件系统的实现方式，用户的程序可以通过文件系统实现cgroup的组件管理\ncgroup的组件管理操作单元可以细粒度到线程级别，另外用户可以创建和销毁cgroup，从而实现资源载分配和再利用\n 所有资源管理的功能都以子系统的方式实现，接口统一子任务创建之初与其父任务处于同一个cgroup的控制组\n\n四大功能：　　　　　　　　\n\n资源限制：可以对任务使用的资源总额进行限制\n资源统计：可以统计系统的资源使用量，如cpu时长，内存用量等\n任务控制：cgroup可以对任务执行挂起、恢复等操作\n\n### 9、了解docker三个重要概念\n\n> 1 mage镜像\n\ndocker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下周一个已经做好的镜像来直接使用\n\n\n\n> 2 container容器\n\ndocker利用容器来运行应用，容器是从镜像创建的运行实例，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，保证安全的平台，可以吧容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行再其中的应用程序\n\n\n\n> 3 repostory仓库\n\n仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）\n\n仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务\n\n### 10、docker的主要用途\n\n方就是Bulid 、ship、run any app/any where，编译、装载、运行、任何app/在任意地放都能运行\n\n就是实现了应用的封装、部署、运行的生命周期管理只要在glibc的环境下，都可以运行\n\n**运维生成环境中：docker化**\n\n发布服务不用担心服务器的运行环境，所有的服务器都是自动分配docker，自动部署，自动安装，自动运行\n\n再不用担心其他服务引擎的磁盘问题，cpu问题，系统问题了\n\n\n\n**资源利用更出色**\n\n自动迁移，可以制作镜像，迁移使用自定义的镜像即可迁移，不会出现什么问题\n\n管理更加方便了\n\n### 11、docker改变了什么\n\n面向产品：产品交付\n\n面向开发：简化环境配置\n\n面向测试：多版本测试\n\n面向运维：环境一致性\n\n面向架构：自动化扩容（微服务）","slug":"docker","published":1,"updated":"2020-07-04T14:33:36.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7vtzde0003qstgx0vf45bo","content":"<p><strong>Docker1 架构原理</strong></p>\n<h2 id=\"一-简介\">一、简介</h2>\n<h3 id=\"1-了解docker的前生lxc\">1、了解docker的前生LXC</h3>\n<p>LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++中的NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。</p>\n<p>与传统虚拟化技术相比，它的优势在于：</p>\n<p>（1）与宿主机使用同一个内核，性能损耗小；</p>\n<p>（2）不需要指令级模拟；</p>\n<p>（3）不需要即时(Just-in-time)编译；</p>\n<p>（4）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；</p>\n<p>（5）避免了准虚拟化和系统调用替换中的复杂性；</p>\n<p>（ 6）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。</p>\n<p>总结：Linux Container是一种轻量级的虚拟化的手段。</p>\n<p>Linux Container提供了在单一可控主机节点上支持多个相互隔离的server container同时执行的机制。Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。</p>\n<h3 id=\"2-lxc与docker什么关系\">2、LXC与docker什么关系？</h3>\n<p>docker并不是LXC替代品，docker底层使用了LXC来实现，LXC将linux进程沙盒化，使得进程之间相互隔离，并且能够控制各进程的资源分配。</p>\n<p>在LXC的基础之上，docker提供了一系列更强大的功能。</p>\n<h3 id=\"3-什么是docker\">3、什么是docker</h3>\n<p>docker是一个开源的应用容器引擎，基于go语言开发并遵循了apache2.0协议开源。</p>\n<p>docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的linux服务器，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类iphone的app），并且容器开销极其低。</p>\n<h3 id=\"4-docker官方文档\">4、docker官方文档</h3>\n<p><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></p>\n<h3 id=\"5-为什么docker越来越受欢迎\">5、为什么docker越来越受欢迎</h3>\n<p><strong>因为容器是：</strong></p>\n<ul>\n<li>灵活：即使是最复杂的应用也可以集装箱化。</li>\n<li>轻量级：容器利用并共享主机内核。</li>\n<li>可互换：您可以即时部署更新和升级。</li>\n<li>便携式：您可以在本地构建，部署到云，并在任何地方运行。</li>\n<li>可扩展：您可以增加并自动分发容器副本。</li>\n<li>可堆叠：您可以垂直和即时堆叠服务。</li>\n</ul>\n<p><strong>镜像和容器（contalners）</strong></p>\n<p>通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。</p>\n<p>容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看</p>\n<p><strong>容器和虚拟机</strong></p>\n<p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量</p>\n<p>虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多</p>\n<p><img src=\"/article/docker/1464965-20190725162103819-1664036221.jpg\" alt=\"1464965-20190725162103819-1664036221\"></p>\n<h3 id=\"6-docker版本\">6、docker版本</h3>\n<p>Docker Community Edition（CE）社区版</p>\n<p>Enterprise Edition(EE) 商业版</p>\n<h3 id=\"7-docker和openstack的几项对比\">7、docker和openstack的几项对比</h3>\n<p><img src=\"/article/docker/1464965-20190725163201933-1522934949.png\" alt=\"alt\"></p>\n<h3 id=\"8-容器在内核中支持2种重要技术\">8、容器在内核中支持2种重要技术</h3>\n<p>docker本质就是宿主机的一个进程，docker是通过namespace实现资源隔离，通过cgroup实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作（类似虚拟机的磁盘比如分配500g并不是实际占用物理磁盘500g）</p>\n<blockquote>\n<p>1.namespaces 名称空间</p>\n</blockquote>\n<p><img src=\"/article/docker/1464965-20190725163537468-1471897867.png\" alt=\"img\"></p>\n<blockquote>\n<p>2.control Group 控制组</p>\n</blockquote>\n<p>cgroup的特点是：</p>\n<p>cgroup的api以一个伪文件系统的实现方式，用户的程序可以通过文件系统实现cgroup的组件管理<br>\ncgroup的组件管理操作单元可以细粒度到线程级别，另外用户可以创建和销毁cgroup，从而实现资源载分配和再利用<br>\n所有资源管理的功能都以子系统的方式实现，接口统一子任务创建之初与其父任务处于同一个cgroup的控制组</p>\n<p>四大功能：</p>\n<p>资源限制：可以对任务使用的资源总额进行限制<br>\n资源统计：可以统计系统的资源使用量，如cpu时长，内存用量等<br>\n任务控制：cgroup可以对任务执行挂起、恢复等操作</p>\n<h3 id=\"9-了解docker三个重要概念\">9、了解docker三个重要概念</h3>\n<blockquote>\n<p>1 mage镜像</p>\n</blockquote>\n<p>docker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下周一个已经做好的镜像来直接使用</p>\n<blockquote>\n<p>2 container容器</p>\n</blockquote>\n<p>docker利用容器来运行应用，容器是从镜像创建的运行实例，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，保证安全的平台，可以吧容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行再其中的应用程序</p>\n<blockquote>\n<p>3 repostory仓库</p>\n</blockquote>\n<p>仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）</p>\n<p>仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务</p>\n<h3 id=\"10-docker的主要用途\">10、docker的主要用途</h3>\n<p>方就是Bulid 、ship、run any app/any where，编译、装载、运行、任何app/在任意地放都能运行</p>\n<p>就是实现了应用的封装、部署、运行的生命周期管理只要在glibc的环境下，都可以运行</p>\n<p><strong>运维生成环境中：docker化</strong></p>\n<p>发布服务不用担心服务器的运行环境，所有的服务器都是自动分配docker，自动部署，自动安装，自动运行</p>\n<p>再不用担心其他服务引擎的磁盘问题，cpu问题，系统问题了</p>\n<p><strong>资源利用更出色</strong></p>\n<p>自动迁移，可以制作镜像，迁移使用自定义的镜像即可迁移，不会出现什么问题</p>\n<p>管理更加方便了</p>\n<h3 id=\"11-docker改变了什么\">11、docker改变了什么</h3>\n<p>面向产品：产品交付</p>\n<p>面向开发：简化环境配置</p>\n<p>面向测试：多版本测试</p>\n<p>面向运维：环境一致性</p>\n<p>面向架构：自动化扩容（微服务）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Docker1 架构原理</strong></p>\n<h2>一、简介</h2>\n<h3>1、了解docker的前生LXC</h3>\n<p>LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++中的NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。</p>\n<p>与传统虚拟化技术相比，它的优势在于：</p>\n<p>（1）与宿主机使用同一个内核，性能损耗小；</p>\n<p>（2）不需要指令级模拟；</p>\n<p>（3）不需要即时(Just-in-time)编译；</p>\n<p>（4）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；</p>\n<p>（5）避免了准虚拟化和系统调用替换中的复杂性；</p>\n<p>（ 6）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。</p>\n<p>总结：Linux Container是一种轻量级的虚拟化的手段。</p>\n<p>Linux Container提供了在单一可控主机节点上支持多个相互隔离的server container同时执行的机制。Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。</p>\n<h3>2、LXC与docker什么关系？</h3>\n<p>docker并不是LXC替代品，docker底层使用了LXC来实现，LXC将linux进程沙盒化，使得进程之间相互隔离，并且能够控制各进程的资源分配。</p>\n<p>在LXC的基础之上，docker提供了一系列更强大的功能。</p>\n<h3>3、什么是docker</h3>\n<p>docker是一个开源的应用容器引擎，基于go语言开发并遵循了apache2.0协议开源。</p>\n<p>docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的linux服务器，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类iphone的app），并且容器开销极其低。</p>\n<h3>4、docker官方文档</h3>\n<p><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></p>\n<h3>5、为什么docker越来越受欢迎</h3>\n<p><strong>因为容器是：</strong></p>\n<ul>\n<li>灵活：即使是最复杂的应用也可以集装箱化。</li>\n<li>轻量级：容器利用并共享主机内核。</li>\n<li>可互换：您可以即时部署更新和升级。</li>\n<li>便携式：您可以在本地构建，部署到云，并在任何地方运行。</li>\n<li>可扩展：您可以增加并自动分发容器副本。</li>\n<li>可堆叠：您可以垂直和即时堆叠服务。</li>\n</ul>\n<p><strong>镜像和容器（contalners）</strong></p>\n<p>通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。</p>\n<p>容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看</p>\n<p><strong>容器和虚拟机</strong></p>\n<p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量</p>\n<p>虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多</p>\n<p><img src=\"/article/docker/1464965-20190725162103819-1664036221.jpg\" alt=\"1464965-20190725162103819-1664036221\"></p>\n<h3>6、docker版本</h3>\n<p>Docker Community Edition（CE）社区版</p>\n<p>Enterprise Edition(EE) 商业版</p>\n<h3>7、docker和openstack的几项对比</h3>\n<p><img src=\"/article/docker/1464965-20190725163201933-1522934949.png\" alt=\"alt\"></p>\n<h3>8、容器在内核中支持2种重要技术</h3>\n<p>docker本质就是宿主机的一个进程，docker是通过namespace实现资源隔离，通过cgroup实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作（类似虚拟机的磁盘比如分配500g并不是实际占用物理磁盘500g）</p>\n<blockquote>\n<p>1.namespaces 名称空间</p>\n</blockquote>\n<p><img src=\"/article/docker/1464965-20190725163537468-1471897867.png\" alt=\"img\"></p>\n<blockquote>\n<p>2.control Group 控制组</p>\n</blockquote>\n<p>cgroup的特点是：</p>\n<p>cgroup的api以一个伪文件系统的实现方式，用户的程序可以通过文件系统实现cgroup的组件管理<br>\ncgroup的组件管理操作单元可以细粒度到线程级别，另外用户可以创建和销毁cgroup，从而实现资源载分配和再利用<br>\n所有资源管理的功能都以子系统的方式实现，接口统一子任务创建之初与其父任务处于同一个cgroup的控制组</p>\n<p>四大功能：</p>\n<p>资源限制：可以对任务使用的资源总额进行限制<br>\n资源统计：可以统计系统的资源使用量，如cpu时长，内存用量等<br>\n任务控制：cgroup可以对任务执行挂起、恢复等操作</p>\n<h3>9、了解docker三个重要概念</h3>\n<blockquote>\n<p>1 mage镜像</p>\n</blockquote>\n<p>docker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下周一个已经做好的镜像来直接使用</p>\n<blockquote>\n<p>2 container容器</p>\n</blockquote>\n<p>docker利用容器来运行应用，容器是从镜像创建的运行实例，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，保证安全的平台，可以吧容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行再其中的应用程序</p>\n<blockquote>\n<p>3 repostory仓库</p>\n</blockquote>\n<p>仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）</p>\n<p>仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务</p>\n<h3>10、docker的主要用途</h3>\n<p>方就是Bulid 、ship、run any app/any where，编译、装载、运行、任何app/在任意地放都能运行</p>\n<p>就是实现了应用的封装、部署、运行的生命周期管理只要在glibc的环境下，都可以运行</p>\n<p><strong>运维生成环境中：docker化</strong></p>\n<p>发布服务不用担心服务器的运行环境，所有的服务器都是自动分配docker，自动部署，自动安装，自动运行</p>\n<p>再不用担心其他服务引擎的磁盘问题，cpu问题，系统问题了</p>\n<p><strong>资源利用更出色</strong></p>\n<p>自动迁移，可以制作镜像，迁移使用自定义的镜像即可迁移，不会出现什么问题</p>\n<p>管理更加方便了</p>\n<h3>11、docker改变了什么</h3>\n<p>面向产品：产品交付</p>\n<p>面向开发：简化环境配置</p>\n<p>面向测试：多版本测试</p>\n<p>面向运维：环境一致性</p>\n<p>面向架构：自动化扩容（微服务）</p>\n"},{"title":"[Hexo] Theme Hexo","catalog":true,"toc_nav_num":true,"date":"2020-06-18T02:51:24.000Z","subtitle":"This is hexo theme Demo.","header-img":"/img/article_header/article_header.png","catagories":["Hexo"],"updateDate":"2020-06-18T02:51:24.000Z","top":1,"_content":"\n\n# Install Hexo\n\nInstall Node.js  and Git\n\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n\nInstall hexo\n\n```shell\nnpm install hexo-cli -g\n\n#For more:https://hexo.io/zh-cn/index.html\n```\n\n# Theme Usage\n\n## Init\n\n---\n```bash\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang\ncd hexo-huweihuang\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](/img/article/tag.png)\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-liangguowen.md","raw":"---\ntitle: \"[Hexo] Theme Hexo\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-06-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\nupdateDate: 2020-06-18 10:51:24\ntop: 1\n\n---\n\n\n# Install Hexo\n\nInstall Node.js  and Git\n\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n\nInstall hexo\n\n```shell\nnpm install hexo-cli -g\n\n#For more:https://hexo.io/zh-cn/index.html\n```\n\n# Theme Usage\n\n## Init\n\n---\n```bash\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang\ncd hexo-huweihuang\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](/img/article/tag.png)\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-liangguowen","published":1,"updated":"2020-07-04T13:30:54.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7vtzdi0006qstgxu3aeyhm","content":"<h1 id=\"install-hexo\">Install Hexo</h1>\n<p>Install Node.js  and Git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>For Mac</span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<p>Install hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>For more:https://hexo.io/zh-cn/index.html</span><br></pre></td></tr></table></figure>\n<h1 id=\"theme-usage\">Theme Usage</h1>\n<h2 id=\"init\">Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-huweihuang</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"modify\">Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3 id=\"deployment\">Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sidebar-settings\">Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3 id=\"signature-setup\">Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"go-to-top-icon-setup\">Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3 id=\"post-tag\">Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/hexo-theme-liangguowen/article/tag.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"markdown-render\">Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hexo-basics\">Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"have-fun-_\">Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Install Hexo</h1>\n<p>Install Node.js  and Git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>For Mac</span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<p>Install hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>For more:https://hexo.io/zh-cn/index.html</span><br></pre></td></tr></table></figure>\n<h1>Theme Usage</h1>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-huweihuang</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/hexo-theme-liangguowen/article/tag.png\" alt=\"home_posts_tag-true\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" data-icon=\"octicon-star\" aria-label=\"Star huweihuang/hexo-theme-huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/huweihuang\" aria-label=\"Follow @huweihuang on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"[Docker] Docker安装与常用命令","catalog":true,"toc_nav_num":true,"date":"2020-07-04T02:51:24.000Z","subtitle":"This is Docker","header-img":"/img/docker/docker4.jpg","catagories":["Docker"],"updateDate":"2020-07-04T02:51:24.000Z","top":4,"_content":"Docker官网：  https://hub.docker.com/\n\nDocker中文镜像网：http://hub.daocloud.io/\n\n## Docker安装\n\n> 环境准备\n\n1. 需要会一点点Linux基础\n2. CentOS7\n\n> 环境查看\n\n```shell\n # 查看系统内核\n[root@iZ2zeheduaqlfxyl598si8Z /]# uname -r\n3.10.0-1062.18.1.el7.x86_64\n```\n\n```shell\n#系统版本\n[root@CZP ~]# cat /etc/os-release\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\n\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n```\n\n> 安装Docker\n\n### 卸载旧的版本\n```shell\n$ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n​                 \n###  需要安装的包\n```shell\nyum install -y yum-utils\n\n#3. 设置镜像仓库\n\n#yum-config-manager \\\n#    --add-repo \\\n#    https://download.docker.com/linux/centos/docker-ce.repo #默认是国外的\n\nyum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #推荐使用\n#更新yum软件包索引\nyum makecache fast\n#安装docker    \nsudo yum install docker-ce docker-ce-cli containerd.io \n#启动docker\nsystemctl start docker\n#查看docker版本\ndocker version\n```\n\n> 下载镜像\n>\n> docker pull [要下载的软件]\n\n> 查看下载的镜像\n>\n> docker images\n\n### 卸载docker\n\n```shell\nyum remove docker-ce docker-ce-cli containerd.io\n\nrm -rf /var/lib/docker#docker默认工作路径\n```\n\n### 阿里云配置Docker镜像加速\n\n<img src=\"docker-install/image-20200704205412073.png\" alt=\"image-20200704205412073\" style=\"zoom: 80%;\" />\n\n> 执行命令\n\n```shell\nsudo mkdir -p /etc/docker\n\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"阿里云镜像加速地址\"]\n}\nEOF\n\nsudo systemctl daemon-reload\n\nsudo systemctl restart docker\n\n\n```\n\n![在这里插入图片描述](docker-install/20200619182635129.png)\n\n\n\n## Docker的常用命令\n\n\n\n### 帮助命令\n\n```shell\ndocker version #docker版本 \ndocker info #显示docker的系统信息,包括镜像和容器的数量\ndocker [命令] --help  #查看某个具体的命令\n```\n\n### 镜像命令\n\n> docker images  查看下载的所有镜像\n\n```\n# docker images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nmysql                     5.6                 8de95e6026c3        20 hours ago        302MB\nredis                     latest              36304d3b4540        12 days ago         104MB\nmysql                     latest              30f937e841c8        2 weeks ago         541MB\ncentos/mysql-57-centos7   latest              f83a2938370c        8 months ago        452MB\n\n# 解释\nREPOSITORY 镜像的仓库名\nTAG 镜像的标签\nIMAGE ID 镜像ID\nCREATED 镜像创建时间\nSIZE 镜像的大小\n#可选项\nOptions:\n  -a, --all             #列出所有镜像\n  -q, --quiet           #只显示镜像ID\n```\n\n> docker search 搜索镜像\n\n```shell\n[root@CZP ~]# docker search mysql\nNAME\tDESCRIPTION\t\t\t\t\t\t\t\t\tSTARS\tOFFICIAL\tAUTOMATED\t\nmysql\tMySQL is a widely used, open-source relation…  9604     [OK]                \n\n#可选项,通过收藏来过滤\n--filter=stars=3000 #搜索出来的镜像收藏就是大于3000的\n```\n\n> docker pull 下载镜像\n\n```shell\n[root@CZP ~]# docker pull nginx [:tag]\nUsing default tag: latest #如果不写tag 默认使用最新版本\nlatest: Pulling from library/nginx\n8559a31e96f4: Pull complete  #分层下载,docker image核心 联合文件系统\n8d69e59170f7: Pull complete \n3f9f1ec1d262: Pull complete \nd1f5ff4f210d: Pull complete \n1e22bfa8652e: Pull complete \nDigest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133 #签名\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest #真实地址\n\n# docker pull nginx 等价于 dicker pull docker.io/library/nginx:latest\n\n#指定版本下载\n```\n\n> docker rmi 删除镜像\n\n```shell\n#删除指定的容器\n[root@CZP ~]# docker rm -f 8de95e6026c3 \n#删除全部的容器\n[root@CZP ~]# docker rm -f $(docker -ap) \n```\n\n### 容器命令\n\n**说明 : 有了镜像才可以创建容器,**\n\n```shell\ndocker pull [image]\n```\n\n**新建容器并启动**\n\n```shell\ndocker run  [可选参数] image\n\n#参数说明\n--name=\"\"  容器名字 用于区分容器\n-d         后台方式运行\n-it        使用交互方式运行,进入容器查看内容\n-p\t       指定容器的端口 -p 80:8080  主机端口:容器端口\n-P(大写)    随机指定端口\n```\n\n![在这里插入图片描述](docker-install/20200619182705744.png)\n\n**列出所有运行的容器**\n\n```shell\nexit #直接容器停止并退出\nctrl + p + q #直接退出容器\n```\n\n**删除容器**\n\n```shell\ndocker rm 容器id\ndocker rm -f[递归] $(docker ps -aq) #递归删除所有的容器\ndocker ps -a | xargs docker rm #递归删除所有的容器\n```\n\n**启动和停止容器的操作**\n\n```shell\ndocker start 容器id  #启动容器\ndocker restart 容器id  #重启容器\ndocker stop 容器id\t#停止当前正在运行的容器\ndocker kill 容器id \t#强制停止当前容器\n```\n\n**查看日志**\n\n![image-20200704211148370](docker-install/image-20200704211148370.png)\n\n**查看容器中进程信息**\n\n```shell\ndocker top 容器id \n[root@CZP ~]# docker top 63d4c4115212\nUID                 PID                 PPID                C                   STIME \npolkitd             2319                2301                0                   12:33 \n```\n\n**查看镜像元数据**\n\n```shell\n#命令\ndocker inspect 容器id  \n\n#测试\n[root@CZP ~]*# docker inspect 63d4c4115212* \n```\n\n**进入当前正在运行的容器**\n\n```shell\n#我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置\n\n#命令\ndocker exec -it 容器id  bashshell 默认命令行\n\ndocker attach 容器id\n#docker exec # 进入容器后开启一个新的终端,可以在里面操作(常用)\n#docker attach # 进入容器正在执行的终端,不会启动新的进程\n```\n\n**从容器内拷贝文件到主机上**\n\n```shell\ndocker cp 容器id: 容器内路径 目的主机路径\n```\n\n**小结**\n\n![在这里插入图片描述](docker-install/20200619182742864.png)\n\n```shell\n  attach      Attach  to a running container # 进入容器内部,不启动新的进程\n  build       Build an image from a Dockerfile # 通过dockerfile 定制镜像\n  commit      Create a new image from a container's changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #从容器中拷贝指定的文件或者目录到宿主机上\n  create      Create a new container # 创建一个新的容器,同run 但不启动容器\n  diff        Inspect changeson a container's filesystem # 查看docker容器变化\n  events      Get real time events from the server# 从docker服务获取容器实时事件\n  exec        Run a command in a running container# 在已存在的容器上运行命令\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n```\n\n### Docker 安装Nginx\n\n```shell\n#1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档\n#2. 拉取镜像 pull\n#3、运行测试\n# -d 后台运行\n# --name 给容器命名\n# -p 宿主机端口：容器内部端口\n➜  ~ docker run -d --name nginx00 -p 82:80 nginx\n\t\t75943663c116f5ed006a0042c42f78e9a1a6a52eba66311666eee12e1c8a4502\n➜  ~ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n75943663c116        nginx               \"nginx -g 'daemon of…\"   41 seconds ago      Up 40 seconds       0.0.0.0:82->80/tcp   nginx00\n➜  ~ curl localhost:82   #测试\n<!DOCTYPE html>,,,,\n\n```\n\n","source":"_posts/docker-install.md","raw":"---\ntitle: \"[Docker] Docker安装与常用命令\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-07-04 10:51:24\nsubtitle: \"This is Docker\"\nheader-img: \"/img/docker/docker4.jpg\"\ntags:\n- Docker\ncatagories:\n- Docker\nupdateDate: 2020-07-04 10:51:24\ntop: 4\n\n---\nDocker官网：  https://hub.docker.com/\n\nDocker中文镜像网：http://hub.daocloud.io/\n\n## Docker安装\n\n> 环境准备\n\n1. 需要会一点点Linux基础\n2. CentOS7\n\n> 环境查看\n\n```shell\n # 查看系统内核\n[root@iZ2zeheduaqlfxyl598si8Z /]# uname -r\n3.10.0-1062.18.1.el7.x86_64\n```\n\n```shell\n#系统版本\n[root@CZP ~]# cat /etc/os-release\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\n\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n```\n\n> 安装Docker\n\n### 卸载旧的版本\n```shell\n$ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n​                 \n###  需要安装的包\n```shell\nyum install -y yum-utils\n\n#3. 设置镜像仓库\n\n#yum-config-manager \\\n#    --add-repo \\\n#    https://download.docker.com/linux/centos/docker-ce.repo #默认是国外的\n\nyum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #推荐使用\n#更新yum软件包索引\nyum makecache fast\n#安装docker    \nsudo yum install docker-ce docker-ce-cli containerd.io \n#启动docker\nsystemctl start docker\n#查看docker版本\ndocker version\n```\n\n> 下载镜像\n>\n> docker pull [要下载的软件]\n\n> 查看下载的镜像\n>\n> docker images\n\n### 卸载docker\n\n```shell\nyum remove docker-ce docker-ce-cli containerd.io\n\nrm -rf /var/lib/docker#docker默认工作路径\n```\n\n### 阿里云配置Docker镜像加速\n\n<img src=\"docker-install/image-20200704205412073.png\" alt=\"image-20200704205412073\" style=\"zoom: 80%;\" />\n\n> 执行命令\n\n```shell\nsudo mkdir -p /etc/docker\n\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"阿里云镜像加速地址\"]\n}\nEOF\n\nsudo systemctl daemon-reload\n\nsudo systemctl restart docker\n\n\n```\n\n![在这里插入图片描述](docker-install/20200619182635129.png)\n\n\n\n## Docker的常用命令\n\n\n\n### 帮助命令\n\n```shell\ndocker version #docker版本 \ndocker info #显示docker的系统信息,包括镜像和容器的数量\ndocker [命令] --help  #查看某个具体的命令\n```\n\n### 镜像命令\n\n> docker images  查看下载的所有镜像\n\n```\n# docker images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nmysql                     5.6                 8de95e6026c3        20 hours ago        302MB\nredis                     latest              36304d3b4540        12 days ago         104MB\nmysql                     latest              30f937e841c8        2 weeks ago         541MB\ncentos/mysql-57-centos7   latest              f83a2938370c        8 months ago        452MB\n\n# 解释\nREPOSITORY 镜像的仓库名\nTAG 镜像的标签\nIMAGE ID 镜像ID\nCREATED 镜像创建时间\nSIZE 镜像的大小\n#可选项\nOptions:\n  -a, --all             #列出所有镜像\n  -q, --quiet           #只显示镜像ID\n```\n\n> docker search 搜索镜像\n\n```shell\n[root@CZP ~]# docker search mysql\nNAME\tDESCRIPTION\t\t\t\t\t\t\t\t\tSTARS\tOFFICIAL\tAUTOMATED\t\nmysql\tMySQL is a widely used, open-source relation…  9604     [OK]                \n\n#可选项,通过收藏来过滤\n--filter=stars=3000 #搜索出来的镜像收藏就是大于3000的\n```\n\n> docker pull 下载镜像\n\n```shell\n[root@CZP ~]# docker pull nginx [:tag]\nUsing default tag: latest #如果不写tag 默认使用最新版本\nlatest: Pulling from library/nginx\n8559a31e96f4: Pull complete  #分层下载,docker image核心 联合文件系统\n8d69e59170f7: Pull complete \n3f9f1ec1d262: Pull complete \nd1f5ff4f210d: Pull complete \n1e22bfa8652e: Pull complete \nDigest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133 #签名\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest #真实地址\n\n# docker pull nginx 等价于 dicker pull docker.io/library/nginx:latest\n\n#指定版本下载\n```\n\n> docker rmi 删除镜像\n\n```shell\n#删除指定的容器\n[root@CZP ~]# docker rm -f 8de95e6026c3 \n#删除全部的容器\n[root@CZP ~]# docker rm -f $(docker -ap) \n```\n\n### 容器命令\n\n**说明 : 有了镜像才可以创建容器,**\n\n```shell\ndocker pull [image]\n```\n\n**新建容器并启动**\n\n```shell\ndocker run  [可选参数] image\n\n#参数说明\n--name=\"\"  容器名字 用于区分容器\n-d         后台方式运行\n-it        使用交互方式运行,进入容器查看内容\n-p\t       指定容器的端口 -p 80:8080  主机端口:容器端口\n-P(大写)    随机指定端口\n```\n\n![在这里插入图片描述](docker-install/20200619182705744.png)\n\n**列出所有运行的容器**\n\n```shell\nexit #直接容器停止并退出\nctrl + p + q #直接退出容器\n```\n\n**删除容器**\n\n```shell\ndocker rm 容器id\ndocker rm -f[递归] $(docker ps -aq) #递归删除所有的容器\ndocker ps -a | xargs docker rm #递归删除所有的容器\n```\n\n**启动和停止容器的操作**\n\n```shell\ndocker start 容器id  #启动容器\ndocker restart 容器id  #重启容器\ndocker stop 容器id\t#停止当前正在运行的容器\ndocker kill 容器id \t#强制停止当前容器\n```\n\n**查看日志**\n\n![image-20200704211148370](docker-install/image-20200704211148370.png)\n\n**查看容器中进程信息**\n\n```shell\ndocker top 容器id \n[root@CZP ~]# docker top 63d4c4115212\nUID                 PID                 PPID                C                   STIME \npolkitd             2319                2301                0                   12:33 \n```\n\n**查看镜像元数据**\n\n```shell\n#命令\ndocker inspect 容器id  \n\n#测试\n[root@CZP ~]*# docker inspect 63d4c4115212* \n```\n\n**进入当前正在运行的容器**\n\n```shell\n#我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置\n\n#命令\ndocker exec -it 容器id  bashshell 默认命令行\n\ndocker attach 容器id\n#docker exec # 进入容器后开启一个新的终端,可以在里面操作(常用)\n#docker attach # 进入容器正在执行的终端,不会启动新的进程\n```\n\n**从容器内拷贝文件到主机上**\n\n```shell\ndocker cp 容器id: 容器内路径 目的主机路径\n```\n\n**小结**\n\n![在这里插入图片描述](docker-install/20200619182742864.png)\n\n```shell\n  attach      Attach  to a running container # 进入容器内部,不启动新的进程\n  build       Build an image from a Dockerfile # 通过dockerfile 定制镜像\n  commit      Create a new image from a container's changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #从容器中拷贝指定的文件或者目录到宿主机上\n  create      Create a new container # 创建一个新的容器,同run 但不启动容器\n  diff        Inspect changeson a container's filesystem # 查看docker容器变化\n  events      Get real time events from the server# 从docker服务获取容器实时事件\n  exec        Run a command in a running container# 在已存在的容器上运行命令\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n```\n\n### Docker 安装Nginx\n\n```shell\n#1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档\n#2. 拉取镜像 pull\n#3、运行测试\n# -d 后台运行\n# --name 给容器命名\n# -p 宿主机端口：容器内部端口\n➜  ~ docker run -d --name nginx00 -p 82:80 nginx\n\t\t75943663c116f5ed006a0042c42f78e9a1a6a52eba66311666eee12e1c8a4502\n➜  ~ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n75943663c116        nginx               \"nginx -g 'daemon of…\"   41 seconds ago      Up 40 seconds       0.0.0.0:82->80/tcp   nginx00\n➜  ~ curl localhost:82   #测试\n<!DOCTYPE html>,,,,\n\n```\n\n","slug":"docker-install","published":1,"updated":"2020-07-04T13:32:54.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7vtze7000dqstgmkuan2g1","content":"<p>Docker官网：  <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n<p>Docker中文镜像网：<a href=\"http://hub.daocloud.io/\" target=\"_blank\" rel=\"noopener\">http://hub.daocloud.io/</a></p>\n<h2 id=\"docker安装\">Docker安装</h2>\n<blockquote>\n<p>环境准备</p>\n</blockquote>\n<ol>\n<li>需要会一点点Linux基础</li>\n<li>CentOS7</li>\n</ol>\n<blockquote>\n<p>环境查看</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 查看系统内核</span></span><br><span class=\"line\">[root@iZ2zeheduaqlfxyl598si8Z /]# uname -r</span><br><span class=\"line\">3.10.0-1062.18.1.el7.x86_64</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">系统版本</span></span><br><span class=\"line\">[root@CZP ~]# cat /etc/os-release</span><br><span class=\"line\">NAME=\"CentOS Linux\"</span><br><span class=\"line\">VERSION=\"7 (Core)\"</span><br><span class=\"line\">ID=\"centos\"</span><br><span class=\"line\">ID_LIKE=\"rhel fedora\"</span><br><span class=\"line\">VERSION_ID=\"7\"</span><br><span class=\"line\">PRETTY_NAME=\"CentOS Linux 7 (Core)\"</span><br><span class=\"line\">ANSI_COLOR=\"0;31\"</span><br><span class=\"line\">CPE_NAME=\"cpe:/o:centos:centos:7\"</span><br><span class=\"line\">HOME_URL=\"https://www.centos.org/\"</span><br><span class=\"line\">BUG_REPORT_URL=\"https://bugs.centos.org/\"</span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=\"CentOS-7\"</span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=\"7\"</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=\"centos\"</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>安装Docker</p>\n</blockquote>\n<h3 id=\"卸载旧的版本\">卸载旧的版本</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum remove docker \\</span></span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h3 id=\"需要安装的包\">需要安装的包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 设置镜像仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">yum-config-manager \\</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    --add-repo \\</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\">#默认是国外的</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #推荐使用</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装docker    </span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看docker版本</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下载镜像</p>\n<p>docker pull [要下载的软件]</p>\n</blockquote>\n<blockquote>\n<p>查看下载的镜像</p>\n<p>docker images</p>\n</blockquote>\n<h3 id=\"卸载docker\">卸载docker</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf /var/lib/docker#docker默认工作路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"阿里云配置docker镜像加速\">阿里云配置Docker镜像加速</h3>\n<img src=\"/article/docker-install/image-20200704205412073.png\" alt=\"image-20200704205412073\" style=\"zoom: 80%;\">\n<blockquote>\n<p>执行命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"registry-mirrors\": [\"阿里云镜像加速地址\"]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/docker-install/20200619182635129.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"docker的常用命令\">Docker的常用命令</h2>\n<h3 id=\"帮助命令\">帮助命令</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version #docker版本 </span><br><span class=\"line\">docker info #显示docker的系统信息,包括镜像和容器的数量</span><br><span class=\"line\">docker [命令] --help  #查看某个具体的命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像命令\">镜像命令</h3>\n<blockquote>\n<p>docker images  查看下载的所有镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mysql                     5.6                 8de95e6026c3        20 hours ago        302MB</span><br><span class=\"line\">redis                     latest              36304d3b4540        12 days ago         104MB</span><br><span class=\"line\">mysql                     latest              30f937e841c8        2 weeks ago         541MB</span><br><span class=\"line\">centos/mysql-57-centos7   latest              f83a2938370c        8 months ago        452MB</span><br><span class=\"line\"></span><br><span class=\"line\"># 解释</span><br><span class=\"line\">REPOSITORY 镜像的仓库名</span><br><span class=\"line\">TAG 镜像的标签</span><br><span class=\"line\">IMAGE ID 镜像ID</span><br><span class=\"line\">CREATED 镜像创建时间</span><br><span class=\"line\">SIZE 镜像的大小</span><br><span class=\"line\">#可选项</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -a, --all             #列出所有镜像</span><br><span class=\"line\">  -q, --quiet           #只显示镜像ID</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker search 搜索镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CZP ~]# docker search mysql</span><br><span class=\"line\">NAME\tDESCRIPTION\t\t\t\t\t\t\t\t\tSTARS\tOFFICIAL\tAUTOMATED\t</span><br><span class=\"line\">mysql\tMySQL is a widely used, open-source relation…  9604     [OK]                </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可选项,通过收藏来过滤</span></span><br><span class=\"line\">--filter=stars=3000 #搜索出来的镜像收藏就是大于3000的</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker pull 下载镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CZP ~]# docker pull nginx [:tag]</span><br><span class=\"line\">Using default tag: latest #如果不写tag 默认使用最新版本</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">8559a31e96f4: Pull complete  #分层下载,docker image核心 联合文件系统</span><br><span class=\"line\">8d69e59170f7: Pull complete </span><br><span class=\"line\">3f9f1ec1d262: Pull complete </span><br><span class=\"line\">d1f5ff4f210d: Pull complete </span><br><span class=\"line\">1e22bfa8652e: Pull complete </span><br><span class=\"line\">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133 #签名</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest #真实地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull nginx 等价于 dicker pull docker.io/library/nginx:latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定版本下载</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker rmi 删除镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除指定的容器</span></span><br><span class=\"line\">[root@CZP ~]# docker rm -f 8de95e6026c3 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除全部的容器</span></span><br><span class=\"line\">[root@CZP ~]# docker rm -f $(docker -ap)</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器命令\">容器命令</h3>\n<p><strong>说明 : 有了镜像才可以创建容器,</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [image]</span><br></pre></td></tr></table></figure>\n<p><strong>新建容器并启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  [可选参数] image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">参数说明</span></span><br><span class=\"line\">--name=\"\"  容器名字 用于区分容器</span><br><span class=\"line\">-d         后台方式运行</span><br><span class=\"line\">-it        使用交互方式运行,进入容器查看内容</span><br><span class=\"line\">-p\t       指定容器的端口 -p 80:8080  主机端口:容器端口</span><br><span class=\"line\">-P(大写)    随机指定端口</span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/docker-install/20200619182705744.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>列出所有运行的容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit #直接容器停止并退出</span><br><span class=\"line\">ctrl + p + q #直接退出容器</span><br></pre></td></tr></table></figure>\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id</span><br><span class=\"line\">docker rm -f[递归] $(docker ps -aq) #递归删除所有的容器</span><br><span class=\"line\">docker ps -a | xargs docker rm #递归删除所有的容器</span><br></pre></td></tr></table></figure>\n<p><strong>启动和停止容器的操作</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器id  #启动容器</span><br><span class=\"line\">docker restart 容器id  #重启容器</span><br><span class=\"line\">docker stop 容器id\t#停止当前正在运行的容器</span><br><span class=\"line\">docker kill 容器id \t#强制停止当前容器</span><br></pre></td></tr></table></figure>\n<p><strong>查看日志</strong></p>\n<p><img src=\"/article/docker-install/image-20200704211148370.png\" alt=\"image-20200704211148370\"></p>\n<p><strong>查看容器中进程信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top 容器id </span><br><span class=\"line\">[root@CZP ~]# docker top 63d4c4115212</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME </span><br><span class=\"line\">polkitd             2319                2301                0                   12:33</span><br></pre></td></tr></table></figure>\n<p><strong>查看镜像元数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令</span></span><br><span class=\"line\">docker inspect 容器id  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试</span></span><br><span class=\"line\">[root@CZP ~]*# docker inspect 63d4c4115212*</span><br></pre></td></tr></table></figure>\n<p><strong>进入当前正在运行的容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令</span></span><br><span class=\"line\">docker exec -it 容器id  bashshell 默认命令行</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">docker <span class=\"built_in\">exec</span> <span class=\"comment\"># 进入容器后开启一个新的终端,可以在里面操作(常用)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">docker attach <span class=\"comment\"># 进入容器正在执行的终端,不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>从容器内拷贝文件到主机上</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp 容器id: 容器内路径 目的主机路径</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p><img src=\"/article/docker-install/20200619182742864.png\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attach      Attach  to a running container # 进入容器内部,不启动新的进程</span><br><span class=\"line\">build       Build an image from a Dockerfile # 通过dockerfile 定制镜像</span><br><span class=\"line\">commit      Create a new image from a container's changes #提交当前容器为新的镜像</span><br><span class=\"line\">cp          Copy files/folders between a container and the local filesystem #从容器中拷贝指定的文件或者目录到宿主机上</span><br><span class=\"line\">create      Create a new container # 创建一个新的容器,同run 但不启动容器</span><br><span class=\"line\">diff        Inspect changeson a container's filesystem # 查看docker容器变化</span><br><span class=\"line\">events      Get real time events from the server# 从docker服务获取容器实时事件</span><br><span class=\"line\">exec        Run a command in a running container# 在已存在的容器上运行命令</span><br><span class=\"line\">export      Export a container's filesystem as a tar archive</span><br><span class=\"line\">history     Show the history of an image</span><br><span class=\"line\">images      List images</span><br><span class=\"line\">import      Import the contents from a tarball to create a filesystem image</span><br><span class=\"line\">info        Display system-wide information</span><br><span class=\"line\">inspect     Return low-level information on Docker objects</span><br><span class=\"line\">kill        Kill one or more running containers</span><br><span class=\"line\">load        Load an image from a tar archive or STDIN</span><br><span class=\"line\">login       Log in to a Docker registry</span><br><span class=\"line\">logout      Log out from a Docker registry</span><br><span class=\"line\">logs        Fetch the logs of a container</span><br><span class=\"line\">pause       Pause all processes within one or more containers</span><br><span class=\"line\">port        List port mappings or a specific mapping for the container</span><br><span class=\"line\">ps          List containers</span><br><span class=\"line\">pull        Pull an image or a repository from a registry</span><br><span class=\"line\">push        Push an image or a repository to a registry</span><br><span class=\"line\">rename      Rename a container</span><br><span class=\"line\">restart     Restart one or more containers</span><br><span class=\"line\">rm          Remove one or more containers</span><br><span class=\"line\">rmi         Remove one or more images</span><br><span class=\"line\">run         Run a command in a new container</span><br><span class=\"line\">save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class=\"line\">search      Search the Docker Hub for images</span><br><span class=\"line\">start       Start one or more stopped containers</span><br><span class=\"line\">stats       Display a live stream of container(s) resource usage statistics</span><br><span class=\"line\">stop        Stop one or more running containers</span><br><span class=\"line\">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class=\"line\">top         Display the running processes of a container</span><br><span class=\"line\">unpause     Unpause all processes within one or more containers</span><br><span class=\"line\">update      Update configuration of one or more containers</span><br><span class=\"line\">version     Show the Docker version information</span><br><span class=\"line\">wait        Block until one or more containers stop, then print their exit codes</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-安装nginx\">Docker 安装Nginx</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 拉取镜像 pull</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、运行测试</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d 后台运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --name 给容器命名</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -p 宿主机端口：容器内部端口</span></span><br><span class=\"line\">➜  ~ docker run -d --name nginx00 -p 82:80 nginx</span><br><span class=\"line\">\t\t75943663c116f5ed006a0042c42f78e9a1a6a52eba66311666eee12e1c8a4502</span><br><span class=\"line\">➜  ~ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class=\"line\">75943663c116        nginx               \"nginx -g 'daemon of…\"   41 seconds ago      Up 40 seconds       0.0.0.0:82-&gt;80/tcp   nginx00</span><br><span class=\"line\">➜  ~ curl localhost:82   #测试</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;,,,,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker官网：  <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n<p>Docker中文镜像网：<a href=\"http://hub.daocloud.io/\" target=\"_blank\" rel=\"noopener\">http://hub.daocloud.io/</a></p>\n<h2>Docker安装</h2>\n<blockquote>\n<p>环境准备</p>\n</blockquote>\n<ol>\n<li>需要会一点点Linux基础</li>\n<li>CentOS7</li>\n</ol>\n<blockquote>\n<p>环境查看</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 查看系统内核</span></span><br><span class=\"line\">[root@iZ2zeheduaqlfxyl598si8Z /]# uname -r</span><br><span class=\"line\">3.10.0-1062.18.1.el7.x86_64</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">系统版本</span></span><br><span class=\"line\">[root@CZP ~]# cat /etc/os-release</span><br><span class=\"line\">NAME=\"CentOS Linux\"</span><br><span class=\"line\">VERSION=\"7 (Core)\"</span><br><span class=\"line\">ID=\"centos\"</span><br><span class=\"line\">ID_LIKE=\"rhel fedora\"</span><br><span class=\"line\">VERSION_ID=\"7\"</span><br><span class=\"line\">PRETTY_NAME=\"CentOS Linux 7 (Core)\"</span><br><span class=\"line\">ANSI_COLOR=\"0;31\"</span><br><span class=\"line\">CPE_NAME=\"cpe:/o:centos:centos:7\"</span><br><span class=\"line\">HOME_URL=\"https://www.centos.org/\"</span><br><span class=\"line\">BUG_REPORT_URL=\"https://bugs.centos.org/\"</span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=\"CentOS-7\"</span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=\"7\"</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=\"centos\"</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>安装Docker</p>\n</blockquote>\n<h3>卸载旧的版本</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum remove docker \\</span></span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h3>需要安装的包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 设置镜像仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">yum-config-manager \\</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    --add-repo \\</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\">#默认是国外的</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #推荐使用</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装docker    </span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看docker版本</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下载镜像</p>\n<p>docker pull [要下载的软件]</p>\n</blockquote>\n<blockquote>\n<p>查看下载的镜像</p>\n<p>docker images</p>\n</blockquote>\n<h3>卸载docker</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf /var/lib/docker#docker默认工作路径</span><br></pre></td></tr></table></figure>\n<h3>阿里云配置Docker镜像加速</h3>\n<img src=\"/article/docker-install/image-20200704205412073.png\" alt=\"image-20200704205412073\" style=\"zoom: 80%;\">\n<blockquote>\n<p>执行命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"registry-mirrors\": [\"阿里云镜像加速地址\"]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/docker-install/20200619182635129.png\" alt=\"在这里插入图片描述\"></p>\n<h2>Docker的常用命令</h2>\n<h3>帮助命令</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version #docker版本 </span><br><span class=\"line\">docker info #显示docker的系统信息,包括镜像和容器的数量</span><br><span class=\"line\">docker [命令] --help  #查看某个具体的命令</span><br></pre></td></tr></table></figure>\n<h3>镜像命令</h3>\n<blockquote>\n<p>docker images  查看下载的所有镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mysql                     5.6                 8de95e6026c3        20 hours ago        302MB</span><br><span class=\"line\">redis                     latest              36304d3b4540        12 days ago         104MB</span><br><span class=\"line\">mysql                     latest              30f937e841c8        2 weeks ago         541MB</span><br><span class=\"line\">centos/mysql-57-centos7   latest              f83a2938370c        8 months ago        452MB</span><br><span class=\"line\"></span><br><span class=\"line\"># 解释</span><br><span class=\"line\">REPOSITORY 镜像的仓库名</span><br><span class=\"line\">TAG 镜像的标签</span><br><span class=\"line\">IMAGE ID 镜像ID</span><br><span class=\"line\">CREATED 镜像创建时间</span><br><span class=\"line\">SIZE 镜像的大小</span><br><span class=\"line\">#可选项</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -a, --all             #列出所有镜像</span><br><span class=\"line\">  -q, --quiet           #只显示镜像ID</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker search 搜索镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CZP ~]# docker search mysql</span><br><span class=\"line\">NAME\tDESCRIPTION\t\t\t\t\t\t\t\t\tSTARS\tOFFICIAL\tAUTOMATED\t</span><br><span class=\"line\">mysql\tMySQL is a widely used, open-source relation…  9604     [OK]                </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可选项,通过收藏来过滤</span></span><br><span class=\"line\">--filter=stars=3000 #搜索出来的镜像收藏就是大于3000的</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker pull 下载镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CZP ~]# docker pull nginx [:tag]</span><br><span class=\"line\">Using default tag: latest #如果不写tag 默认使用最新版本</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">8559a31e96f4: Pull complete  #分层下载,docker image核心 联合文件系统</span><br><span class=\"line\">8d69e59170f7: Pull complete </span><br><span class=\"line\">3f9f1ec1d262: Pull complete </span><br><span class=\"line\">d1f5ff4f210d: Pull complete </span><br><span class=\"line\">1e22bfa8652e: Pull complete </span><br><span class=\"line\">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133 #签名</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest #真实地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull nginx 等价于 dicker pull docker.io/library/nginx:latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定版本下载</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker rmi 删除镜像</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除指定的容器</span></span><br><span class=\"line\">[root@CZP ~]# docker rm -f 8de95e6026c3 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除全部的容器</span></span><br><span class=\"line\">[root@CZP ~]# docker rm -f $(docker -ap)</span><br></pre></td></tr></table></figure>\n<h3>容器命令</h3>\n<p><strong>说明 : 有了镜像才可以创建容器,</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [image]</span><br></pre></td></tr></table></figure>\n<p><strong>新建容器并启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  [可选参数] image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">参数说明</span></span><br><span class=\"line\">--name=\"\"  容器名字 用于区分容器</span><br><span class=\"line\">-d         后台方式运行</span><br><span class=\"line\">-it        使用交互方式运行,进入容器查看内容</span><br><span class=\"line\">-p\t       指定容器的端口 -p 80:8080  主机端口:容器端口</span><br><span class=\"line\">-P(大写)    随机指定端口</span><br></pre></td></tr></table></figure>\n<p><img src=\"/article/docker-install/20200619182705744.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>列出所有运行的容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit #直接容器停止并退出</span><br><span class=\"line\">ctrl + p + q #直接退出容器</span><br></pre></td></tr></table></figure>\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id</span><br><span class=\"line\">docker rm -f[递归] $(docker ps -aq) #递归删除所有的容器</span><br><span class=\"line\">docker ps -a | xargs docker rm #递归删除所有的容器</span><br></pre></td></tr></table></figure>\n<p><strong>启动和停止容器的操作</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器id  #启动容器</span><br><span class=\"line\">docker restart 容器id  #重启容器</span><br><span class=\"line\">docker stop 容器id\t#停止当前正在运行的容器</span><br><span class=\"line\">docker kill 容器id \t#强制停止当前容器</span><br></pre></td></tr></table></figure>\n<p><strong>查看日志</strong></p>\n<p><img src=\"/article/docker-install/image-20200704211148370.png\" alt=\"image-20200704211148370\"></p>\n<p><strong>查看容器中进程信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top 容器id </span><br><span class=\"line\">[root@CZP ~]# docker top 63d4c4115212</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME </span><br><span class=\"line\">polkitd             2319                2301                0                   12:33</span><br></pre></td></tr></table></figure>\n<p><strong>查看镜像元数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令</span></span><br><span class=\"line\">docker inspect 容器id  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试</span></span><br><span class=\"line\">[root@CZP ~]*# docker inspect 63d4c4115212*</span><br></pre></td></tr></table></figure>\n<p><strong>进入当前正在运行的容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令</span></span><br><span class=\"line\">docker exec -it 容器id  bashshell 默认命令行</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">docker <span class=\"built_in\">exec</span> <span class=\"comment\"># 进入容器后开启一个新的终端,可以在里面操作(常用)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">docker attach <span class=\"comment\"># 进入容器正在执行的终端,不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>从容器内拷贝文件到主机上</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp 容器id: 容器内路径 目的主机路径</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p><img src=\"/article/docker-install/20200619182742864.png\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attach      Attach  to a running container # 进入容器内部,不启动新的进程</span><br><span class=\"line\">build       Build an image from a Dockerfile # 通过dockerfile 定制镜像</span><br><span class=\"line\">commit      Create a new image from a container's changes #提交当前容器为新的镜像</span><br><span class=\"line\">cp          Copy files/folders between a container and the local filesystem #从容器中拷贝指定的文件或者目录到宿主机上</span><br><span class=\"line\">create      Create a new container # 创建一个新的容器,同run 但不启动容器</span><br><span class=\"line\">diff        Inspect changeson a container's filesystem # 查看docker容器变化</span><br><span class=\"line\">events      Get real time events from the server# 从docker服务获取容器实时事件</span><br><span class=\"line\">exec        Run a command in a running container# 在已存在的容器上运行命令</span><br><span class=\"line\">export      Export a container's filesystem as a tar archive</span><br><span class=\"line\">history     Show the history of an image</span><br><span class=\"line\">images      List images</span><br><span class=\"line\">import      Import the contents from a tarball to create a filesystem image</span><br><span class=\"line\">info        Display system-wide information</span><br><span class=\"line\">inspect     Return low-level information on Docker objects</span><br><span class=\"line\">kill        Kill one or more running containers</span><br><span class=\"line\">load        Load an image from a tar archive or STDIN</span><br><span class=\"line\">login       Log in to a Docker registry</span><br><span class=\"line\">logout      Log out from a Docker registry</span><br><span class=\"line\">logs        Fetch the logs of a container</span><br><span class=\"line\">pause       Pause all processes within one or more containers</span><br><span class=\"line\">port        List port mappings or a specific mapping for the container</span><br><span class=\"line\">ps          List containers</span><br><span class=\"line\">pull        Pull an image or a repository from a registry</span><br><span class=\"line\">push        Push an image or a repository to a registry</span><br><span class=\"line\">rename      Rename a container</span><br><span class=\"line\">restart     Restart one or more containers</span><br><span class=\"line\">rm          Remove one or more containers</span><br><span class=\"line\">rmi         Remove one or more images</span><br><span class=\"line\">run         Run a command in a new container</span><br><span class=\"line\">save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class=\"line\">search      Search the Docker Hub for images</span><br><span class=\"line\">start       Start one or more stopped containers</span><br><span class=\"line\">stats       Display a live stream of container(s) resource usage statistics</span><br><span class=\"line\">stop        Stop one or more running containers</span><br><span class=\"line\">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class=\"line\">top         Display the running processes of a container</span><br><span class=\"line\">unpause     Unpause all processes within one or more containers</span><br><span class=\"line\">update      Update configuration of one or more containers</span><br><span class=\"line\">version     Show the Docker version information</span><br><span class=\"line\">wait        Block until one or more containers stop, then print their exit codes</span><br></pre></td></tr></table></figure>\n<h3>Docker 安装Nginx</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 拉取镜像 pull</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、运行测试</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d 后台运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --name 给容器命名</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -p 宿主机端口：容器内部端口</span></span><br><span class=\"line\">➜  ~ docker run -d --name nginx00 -p 82:80 nginx</span><br><span class=\"line\">\t\t75943663c116f5ed006a0042c42f78e9a1a6a52eba66311666eee12e1c8a4502</span><br><span class=\"line\">➜  ~ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class=\"line\">75943663c116        nginx               \"nginx -g 'daemon of…\"   41 seconds ago      Up 40 seconds       0.0.0.0:82-&gt;80/tcp   nginx00</span><br><span class=\"line\">➜  ~ curl localhost:82   #测试</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;,,,,</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/docker-install/20200619182705744.png","slug":"20200619182705744.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0},{"_id":"source/_posts/docker-install/image-20200704211148370.png","slug":"image-20200704211148370.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-liangguowen/Demo.png","slug":"Demo.png","post":"ckc7vtzdi0006qstgxu3aeyhm","modified":0,"renderable":0},{"_id":"source/_posts/docker/1464965-20190725162103819-1664036221.jpg","slug":"1464965-20190725162103819-1664036221.jpg","post":"ckc7vtzde0003qstgx0vf45bo","modified":0,"renderable":0},{"_id":"source/_posts/docker/1464965-20190725163201933-1522934949.png","slug":"1464965-20190725163201933-1522934949.png","post":"ckc7vtzde0003qstgx0vf45bo","modified":0,"renderable":0},{"_id":"source/_posts/docker/1464965-20190725163537468-1471897867.png","slug":"1464965-20190725163537468-1471897867.png","post":"ckc7vtzde0003qstgx0vf45bo","modified":0,"renderable":0},{"_id":"source/_posts/docker/about.jpg","slug":"about.jpg","post":"ckc7vtzde0003qstgx0vf45bo","modified":0,"renderable":0},{"_id":"source/_posts/docker-install/20200619182635129.png","slug":"20200619182635129.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0},{"_id":"source/_posts/docker-install/20200619182720953.png","slug":"20200619182720953.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0},{"_id":"source/_posts/docker-install/20200619182742864.png","slug":"20200619182742864.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0},{"_id":"source/_posts/docker-install/image-20200704205412073.png","slug":"image-20200704205412073.png","post":"ckc7vtze7000dqstgmkuan2g1","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckc7vtzd80001qstgx92vtmge","tag_id":"ckc7vtzdg0005qstga0ro3fni","_id":"ckc7vtzdq0009qstgptabvnnn"},{"post_id":"ckc7vtzde0003qstgx0vf45bo","tag_id":"ckc7vtzdg0005qstga0ro3fni","_id":"ckc7vtzdu000bqstg34d4mztd"},{"post_id":"ckc7vtzdi0006qstgxu3aeyhm","tag_id":"ckc7vtzds000aqstggc4tzq6g","_id":"ckc7vtzdx000cqstga8j9t6ik"},{"post_id":"ckc7vtze7000dqstgmkuan2g1","tag_id":"ckc7vtzdg0005qstga0ro3fni","_id":"ckc7vtze8000eqstg6324jryy"}],"Tag":[{"name":"Docker","_id":"ckc7vtzdg0005qstga0ro3fni"},{"name":"Hexo","_id":"ckc7vtzds000aqstggc4tzq6g"}]}}